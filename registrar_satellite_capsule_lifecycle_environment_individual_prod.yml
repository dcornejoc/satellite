---
- name: Llamada a la API de Red Hat Satellite 6
  hosts: SATELLITE_CAPSULE_PROD
  gather_facts: false
  tasks:
    - name: Obtener lista de todas las cápsulas
      ansible.builtin.uri:
        url: "{{ lookup('env', 'SATELLITE_SERVER_URL') }}/katello/api/capsules"
        method: GET
        user: "{{ lookup('env', 'SATELLITE_USERNAME') }}"
        password: "{{ lookup('env', 'SATELLITE_PASSWORD') }}"
        force_basic_auth: true
        validate_certs: "{{ lookup('env', 'SATELLITE_VALIDATE_CERTS') }}"
      register: all_capsules

    - name: Encontrar ID de la cápsula específica basada en la entrada parcial del FQDN del usuario
      ansible.builtin.set_fact:
        capsule_id: >
          {{
            (all_capsules.json.results | selectattr('name', 'search', capsule_fqdn) | first).id
            | string | replace('\n', '') | replace('\r', '') | trim
          }}
      when: all_capsules.json.results is defined and
        (all_capsules.json.results | selectattr('name', 'search', capsule_fqdn) | list | count) > 0

    - name: Limpiar capsule_id
      ansible.builtin.command:
        cmd: "echo -n {{ capsule_id }}"
      register: cleaned_capsule_id
      changed_when: false

    - name: Establecer capsule_id limpio
      ansible.builtin.set_fact:
        capsule_id: "{{ cleaned_capsule_id.stdout }}"

    - name: Obtener ambientes de ciclo de vida para la cápsula especificada
      ansible.builtin.uri:
        url: "{{ lookup('env', 'SATELLITE_SERVER_URL') }}/katello/api/capsules/{{ capsule_id }}/content/available_lifecycle_environments"
        method: GET
        user: "{{ lookup('env', 'SATELLITE_USERNAME') }}"
        password: "{{ lookup('env', 'SATELLITE_PASSWORD') }}"
        force_basic_auth: true
        validate_certs: "{{ lookup('env', 'SATELLITE_VALIDATE_CERTS') }}"
      register: lifecycle_envs_capsula
      when: capsule_id is defined

    - name: Inicializar lista de environment_ids
      ansible.builtin.set_fact:
        environment_ids: []

    - name: Encontrar IDs de ambiente de ciclo de vida específico y agregarlos a la lista
      loop: "{{ lifecycle_environments }}"
      loop_control:
        loop_var: lifecycle_environment_name
      ansible.builtin.set_fact:
        environment_ids: >-
          {{
            environment_ids +
            [
              (
                lifecycle_envs_capsula.json.results
                | selectattr('name', 'equalto', lifecycle_environment_name)
                | map(attribute='id')
                | first
                | string
                | replace('\n', '')
                | replace('\r', '')
                | trim
              )
            ]
          }}
      when:
        - lifecycle_envs_capsula.json.results is defined
        - (lifecycle_envs_capsula.json.results | selectattr('name', 'equalto', lifecycle_environment_name) | map(attribute='id') | first) is not none

    - name: Asociar cada ambiente de ciclo de vida a la cápsula especificada
      loop: "{{ environment_ids }}"
      ansible.builtin.uri:
        url: "{{ lookup('env', 'SATELLITE_SERVER_URL') }}/katello/api/capsules/{{ capsule_id }}/content/lifecycle_environments"
        method: POST
        user: "{{ lookup('env', 'SATELLITE_USERNAME') }}"
        password: "{{ lookup('env', 'SATELLITE_PASSWORD') }}"
        force_basic_auth: true
        validate_certs: "{{ lookup('env', 'SATELLITE_VALIDATE_CERTS') }}"
        body_format: json
        body:
          environment_id: "{{ item }}"
      when: environment_ids | length > 0

    - name: Sincronizar ambientes de ciclo de vida asociados a la cápsula
      loop: "{{ environment_ids }}"
      ansible.builtin.uri:
        url: "{{ lookup('env', 'SATELLITE_SERVER_URL') }}/katello/api/capsules/{{ capsule_id }}/content/sync"
        method: POST
        user: "{{ lookup('env', 'SATELLITE_USERNAME') }}"
        password: "{{ lookup('env', 'SATELLITE_PASSWORD') }}"
        force_basic_auth: true
        validate_certs: "{{ lookup('env', 'SATELLITE_VALIDATE_CERTS') }}"
        body_format: json
        body:
          environment_id: "{{ item }}"
        status_code: [200, 202]
      when: environment_ids | length > 0
